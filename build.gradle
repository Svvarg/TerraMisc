buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        // jcenter { url "https://jcenter.bintray.com" }
        // maven   { name = "maven"; url = "https://repo1.maven.org/maven2" }
        maven {
            name = "Minecraft Forge"
            // url = "http://files.minecraftforge.net/maven"
            url = "https://maven.minecraftforge.net/"
        }
        //  maven {
        //     name = "sonatype"
        //     url = "https://oss.sonatype.org/content/repositories/snapshots/"
        // }
    }
    dependencies {
        // classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'forge'

sourceCompatibility = 1.8
targetCompatibility = 1.8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

version = project.mod_version
group = project.mod_group

// archivesBaseName = "[${project.minecraft_version}]${project.mod_id}"
archivesBaseName = "${project.mod_id}"

minecraft {
    version = project.minecraft_version + "-" + project.forge_version
    runDir = "run"
}

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenLocal()
    // for successful compilation create a mirror in the local maven repository
    // ~/.m2/repository/mcp/mobius/waila/Waila/1.5.11-RC2-NONEI_1.7.10/ pom+jar
    // at the time of last compilation this repository had a broken certificate
    // maven { // The repo from which to get waila
    //     name "Mobius Repo"
    //     url "http://mobiusstrip.eu/maven"
    //     allowInsecureProtocol = true
    // }
    maven {
    	// the repo from which to get NEI and stuff
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
        allowInsecureProtocol = true
    }
//    maven { // the repo from which to get NEI and stuff
//        name 'test'
//        url "https://modmaven.k-4u.nl/"
//    }
//    maven { // the repo from which to get NEI and stuff
//        name 'test2'
//        url "https://maven.cil.li/"
//    }
}

dependencies {
    // Forcing version numbers for everything and using NO-NEI WAILA since the "transitive dependency resolution (gradle magic)" is currently borked.
    implementation "codechicken:CodeChickenCore:1.7.10-1.0.4.35:dev"
    implementation "codechicken:CodeChickenLib:1.7.10-1.1.3.127:dev"
    implementation "codechicken:NotEnoughItems:1.7.10-1.0.4.95:dev"
    implementation "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10"

    //compile "com.bioxx.tfc:TerraFirmaCraft:1.7.10-0.79.40-SE-SRV" нужны dev(deobf) версии!!
    //compile files('libs/[1.7.10]TerraFirmaCraft-0.79.40-SE-SRV.jar')

    // Copy "[1.7.10]TerraFirmaCraft-deobf-0.79.0.jar" file into the ./libs directory
    // ln -s ~/.m2/repository/codechicken/CodeChickenCore/1.7.10-1.0.4.35/CodeChickenCore-1.7.10-1.0.4.35-dev.jar ./libs/CodeChickenCore-dev.jar
}

processResources {
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

	// First we just copy in the mcmod.info file
	from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.prop'

        // replaces
        expand ([
            'mod_version': project.mod_version,
            'tfc_version': project.tfc_version,
            'minecraft_version': project.minecraft_version,
        ])
    }
    // copy everything else, that we didn't copy before
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.prop'
    }
}

// Ensures that the encoding of source files is set to UTF-8,
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// This task creates a .jar file containing the source code of this mod.
task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier = "src" // appendix
}

// This task creates a .jar file containing a deobfuscated version of this mod,
// for other developers to use in a development environment.
task devJar(type: Jar) { // deobfJar
    from sourceSets.main.output
    archiveClassifier = "dev" // deobf
}

// Creates the listed artifacts on building the mod.
artifacts {
    archives sourcesJar
    archives devJar
}
//oldGralde(<=3.5.1): tasks.build.dependsOn('sourceJar', 'devJar')
